require 'spec_helper'
require 'pbkdf2'

describe WhatsApp::Protocol::NodeWriter do

  before do
    key        = PBKDF2.new(hash_function: :sha1, password: 'My secret', salt: 'My challenge', iterations: 16, key_length: 20).bin_string
    key_stream = WhatsApp::Protocol::Keystream.new(key, "")

    @writer           = WhatsApp::Protocol::NodeWriter.new
    @writer.keystream = key_stream
  end

  it 'should write node' do
    child = WhatsApp::Protocol::Node.new('my-child', {'child-one' => 'value-child-one', 'child-two' => 'value-child-two'}, nil, 'my-child-random-data')
    node  = WhatsApp::Protocol::Node.new('my-tag', {'one' => 'value-one', 'two' => 'value-two'}, [child], 'my-random-data')

    expect(@writer.write(node)).to eql("\x10\x00\x9a\x5a\xde\x0c\x01\x7e\x32\xef\xce\x96\x83\x1a\xa9\x2b\x1d\x69\xb7\x19\x35\x14\xef\x53\x64\xaa\x9c\x54\xb7\x60\x31\xb6\xd0\x3f\xa5\x11\xca\x44\xed\x29\x68\xb0\x70\xc7\xc3\xd9\x8b\x93\xb1\x07\x3d\xbf\x6b\xae\x65\xc1\x6e\x6a\x2c\xd6\xed\xad\x72\xda\xa6\xd3\x94\xc8\xd7\xbe\x04\x35\xcc\x08\x9a\xe3\x8d\xe8\xf0\x7d\xf3\x64\xc0\xc5\x6f\x00\x0c\xdf\x2f\xf7\x60\x04\xd8\x5f\xce\x03\x23\xdb\x92\x10\x50\xc7\x5f\x66\xf6\xb4\x97\x9a\xb7\x35\xc2\xc7\x95\x80\x99\xff\xbf\xbb\x10\x8e\x5d\x95\x03\xfc\x5e\x77\xe9\xaa\x41\x15\xfd\xf6\xf9\xa3\xdc\xbe\x66\x38\xff\xce\x36\x37\x69\xb0\x18\xa1\x68\x74\x1e\x2a\x6e\xf3\x89\xfc\x6a\x21\x89".b)
  end

  it 'should write empty node' do
    binding.pry
    expect(@writer.write(nil)).to eql("\x10\x00\x05\xa2\xa8\x65\x3d\x62".b)
  end

  it 'should start stream' do
    stream = @writer.start_stream('my-domain', 'my-resource')

    expect(stream).to eql("\x57\x41\x01\x02\x10\x00\x21\x5a\xdc\xf1\xcf\xef\x42\xaf\xc3\xda\x80\x89\xc7\x25\x1a\x62\xee\xec\x48\x18\xfa\x0b\x73\xe2\x80\x55\xa7\xee\x51\xa7\xdb\x93\xdd\xbd".b)
  end

  it 'should flush buffer' do
    stream = @writer.send :flush_buffer

    expect(stream).to eql("\x10\x00\x04\x3a\x40\x00\x85".b)
  end

  it 'should write 8-bit integer' do
    expect(@writer.send(:write_int8, 154)).to eql("\x9a".b)
  end

  it 'should write 16-bit integer' do
    expect(@writer.send(:write_int16, 55534)).to eql("\xd8\xee".b)
  end

  it 'should write 24-bit integer' do
    expect(@writer.send(:write_int24, 15777214)).to eql("\xf0\xbd\xbe".b)
  end

  it 'should write bytes' do
    @writer.send :write_bytes, "Some bytes \x01\x02\x03"

    expect(@writer.output).to eql("\xfc\x0e\x53\x6f\x6d\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03".b)
  end

  it 'should write bytes containing unicode characters' do
    @writer.send :write_bytes, "Some bytes \x01\x02\x03 and unicode characters like \u0143\u015a\u0141"

    expect(@writer.output).to eql("\xfc\x31\x53\x6f\x6d\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x61\x6e\x64\x20\x75\x6e\x69\x63\x6f\x64\x65\x20\x63\x68\x61\x72\x61\x63\x74\x65\x72\x73\x20\x6c\x69\x6b\x65\x20\xc5\x83\xc5\x9a\xc5\x81".b)
  end

  it 'should write long byte stream' do
    bytes = "More bytes \x01\x02\x03 " * 20
    expect(bytes.length).to be > 0x100
    @writer.send :write_bytes, bytes

    expect(@writer.output).to eql("\xfd\x00\x01\x2c\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20\x4d\x6f\x72\x65\x20\x62\x79\x74\x65\x73\x20\x01\x02\x03\x20".b)
  end

  it 'should write token' do
    @writer.send :write_token, 244
    @writer.send :write_token, 245

    expect(@writer.output).to eql("\xf4\xfe\x00".b)
  end

  it 'should write jid' do
    @writer.send :write_jid, 'my-username', 'my-domain'

    expect(@writer.output).to eql("\xfa\xfc\x0b\x6d\x79\x2d\x75\x73\x65\x72\x6e\x61\x6d\x65\xfc\x09\x6d\x79\x2d\x64\x6f\x6d\x61\x69\x6e".b)
  end

  it 'should write jid without username' do
    @writer.send :write_jid, nil, 'my-domain'

    expect(@writer.output).to eql("\xfa\x00\xfc\x09\x6d\x79\x2d\x64\x6f\x6d\x61\x69\x6e".b)
  end

  it 'should write string of known tokens' do
    @writer.send :write_string, 'jabber:x:event'
    @writer.send :write_string, 'XXX'

    expect(@writer.output).to eql("\x5c\xfe\x03".b)
  end

  it 'should write string of unknown tokens' do
    @writer.send :write_string, 'some-random-string'

    expect(@writer.output).to eql("\xfc\x12\x73\x6f\x6d\x65\x2d\x72\x61\x6e\x64\x6f\x6d\x2d\x73\x74\x72\x69\x6e\x67".b)
  end

  it 'should write string of jid' do
    @writer.send :write_string, 'my-username@my-domain'

    expect(@writer.output).to eql("\xfa\xfc\x0b\x6d\x79\x2d\x75\x73\x65\x72\x6e\x61\x6d\x65\xfc\x09\x6d\x79\x2d\x64\x6f\x6d\x61\x69\x6e".b)
  end

  it 'should write hash' do
    @writer.send :write_attributes, {'one' => 1, 2 => 'two', 'some-random-string' => 'some-random-value', 'nothing' => nil}

    expect(@writer.output).to eql("\xfc\x03\x6f\x6e\x65\xeb\xfc\x01\x32\xfc\x03\x74\x77\x6f\xfc\x12\x73\x6f\x6d\x65\x2d\x72\x61\x6e\x64\x6f\x6d\x2d\x73\x74\x72\x69\x6e\x67\xfc\x11\x73\x6f\x6d\x65\x2d\x72\x61\x6e\x64\x6f\x6d\x2d\x76\x61\x6c\x75\x65\xfc\x07\x6e\x6f\x74\x68\x69\x6e\x67\xfc\x00".b)
  end

  it 'should write list start' do
    @writer.send :write_list_start, 0
    @writer.send :write_list_start, 255
    @writer.send :write_list_start, 55534

    expect(@writer.output).to eql("\x00\xf8\xff\xf9\xd8\xee".b)
  end

end
